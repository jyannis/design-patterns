Java设计模式之装饰者模式：
    Description:
    装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
    特点：
     装饰者和被装饰对象有相同的超类型；
     你可以用一个或多个装饰者包装一个对象；
     既然装饰者和被装饰对象有相同的超类型，所以在任何需要原始对象（被包装的）场合，可以用装饰过的对象代替它；
     装饰者可以在所委托被装饰者的行为之前与/或之后，加上自己的行为，以达到特定的目的；
     对象可以在任何时候被装饰，所以可以在运行时动态地、不限量地用你喜欢的装饰者来装饰对象。
    优点:
     在扩展对象功能方面，装饰者拥有比继承更好的灵活性。
    缺点:
     具体装饰者可能较多，使程序复杂化。
    适用场景:
     需要扩展一个类的功能，或给一个类添加附加职责；
     需要动态的给一个对象添加功能，这些功能可以再动态的撤销；
     需要增加由一些基本功能的排列组合而产生的非常大量的功能（这种情况下使用继承将会发生“类爆炸”）。
    体现的设计原则:
     开闭原则（对扩展开放，对修改关闭）；
     针对接口编程，而不是针对实现编程；
     多用组合，少用继承。
    JDK中对观察者模式的运用：
     Java IO（见图javaIO Decorator.jpg）

本实例：
    装饰者模式：
        抽象组件：Drink饮料接口
        具体组件：MilkTea奶茶类,Coffee咖啡类
        抽象装饰者：Ingredient配料接口
        具体策略角色：Coconut椰果类,Pearl珍珠类,Sugar糖类
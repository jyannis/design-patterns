Java设计模式之策略模式：
    Description:
    策略模式定义了算法族，分别封装起来，让它们之间可以互相替换。此模式让算法的变化独立于使用算法的客户。
    优点:
     算法可以自由切换；
     避免使用多重条件判断，使主体对象（环境角色Data）和行为（抽象策略角色Compress & Encode）分离；
     解耦合，扩展性良好。
    缺点:
     具体策略类（GBK,UTF8 & RAR,ZIP）可能过多；
     客户端必须清楚地了解所有的具体策略（才能挑选自己想要的）；
     所有策略类都要向外暴露。
    适用场景:
     当一个系统中有许多类，它们之间的区别仅在于它们的行为，希望动态地让一个对象在许多行为中选择一种行为时；
     当一个系统需要动态地在几种算法中选择一种时；
     当一个对象有很多的行为，不想使用多重的条件选择语句来选择使用哪个行为时。
    体现的设计原则:
     找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起；
     针对接口编程，而不是针对实现编程；
     多用组合，少用继承。

本实例：
    策略模式：
        环境角色：Data类
        抽象策略角色：Compress接口,Encode接口
        具体策略角色：Rar类,Zip类,GBK类,UTF8类